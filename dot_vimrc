" vim-plug section
call plug#begin('~/.vim/plugged')

Plug 'nvie/vim-flake8'
Plug 'tpope/vim-fugitive'
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
Plug 'timonv/vim-cargo'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-syntastic/syntastic'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mattn/webapi-vim'
Plug 'Valloric/YouCompleteMe'

call plug#end()

" general settings
set autoindent " one-line indent
set encoding=utf-8
set hlsearch " Highlight search results
set nocompatible " disactive Vi compatibility
set noerrorbells " No beeps
set number " set line numbers
set ruler " display the position of the cursor
set showcmd
set showmatch
set smartindent " intelligent indent

filetype plugin on
syntax on " active syntax coloration

" default spaces / tabs settings
set expandtab
set tabstop=2 " Render tabs
set softtabstop=2
set shiftwidth=2 " Indentation amount using > and <
set textwidth=80

" Python configuration
" tabs/spaces/etc
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
" virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
let python_highlight_all=1 " pep8 support

" Rust configuration
" tabs/spaces/etc
au BufNewFile,BufRead *.rs
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=99 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
let g:rustfmt_autosave=1 " launch rustfmt as soon as we save the current file
let g:syntastic_rust_checkers=['cargo'] " rustc as the rust checker for Syntastic
" Racer configuration
set hidden
let g:racer_cmd="/home/k0pernicus/.cargo/bin/racer"
let g:racer_experimental_completer=1

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0

" NERDCommenter settings
let g:NERDSpaceDelims=1 " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs=1 " Prettify multi-line comments
let g:NERDDefaultAlign='left'
let g:NERDCommentEmptyLines=1
let g:NERDTrimTrailingWhitespace=0

" Override default behavior of Enter for CtrlP - open a new tag instead
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = {
      \ 'dir': '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ }
let g:ctrlp_working_path_mode = 'ar'

" Set the colorscheme
colorscheme Tomorrow-Night
