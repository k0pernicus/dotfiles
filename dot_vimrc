" general settings
set autoindent " one-line indent
set encoding=utf-8
set hlsearch " Highlight search results
set nocompatible " disactive Vi compatibility
set noerrorbells " No beeps
set number " set line numbers
set ruler " display the position of the cursor
set showcmd
set showmatch
set smartindent " intelligent indent

filetype plugin on
syntax on " active syntax coloration

" default spaces / tabs settings
set expandtab
set tabstop=2 " Render tabs
set softtabstop=2
set shiftwidth=2 " Indentation amount using > and <
set textwidth=80

" Python configuration
" tabs/spaces/etc
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
" virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
let python_highlight_all=1 " pep8 support

" Rust configuration
" tabs/spaces/etc
au BufNewFile,BufRead *.rs
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=99 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
let g:rustfmt_autosave=1 " launch rustfmt as soon as we save the current file
let g:syntastic_rust_checkers=['cargo'] " rustc as the rust checker for Syntastic
" Racer configuration
set hidden
let g:racer_cmd="/home/k0pernicus/.cargo/bin/racer"
let g:racer_experimental_completer=1

" OCaml configuration
let g:opamshare=substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"
let g:syntastic_ocaml_checkers=['merlin']

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0

" Colorscheme
colorscheme Tomorrow-Night

" NERDTree settings
let NERDTreeIgnore=['\.pyc$', '\~$']

" NERDCommenter settings
let g:NERDSpaceDelims=1 " Add spaces after comment delimiters by default
let g:NERDCompactSexyComs=1 " Prettify multi-line comments
let g:NERDDefaultAlign='left'
let g:NERDCommentEmptyLines=1
let g:NERDTrimTrailingWhitespace=0

" vim-plug section
call plug#begin('~/.vim/plugged')

Plug 'nvie/vim-flake8'
Plug 'ocaml/merlin'
Plug 'tpope/vim-fugitive'
Plug 'racer-rust/vim-racer'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'vim-syntastic/syntastic'

call plug#end()
" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
